Traceback (most recent call last):
  File "/Users/55093290/anaconda3/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/55093290/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/55093290/anaconda3/lib/python3.11/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/55093290/anaconda3/lib/python3.11/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/55093290/anaconda3/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/55093290/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/55093290/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/55093290/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Define BVP parameters
tspan = [0, 3]         # boundaries of the t domain
bvals = [1, 0]         # boundary values
hvals = [0.05, 0.005]  # step lengths

tsol, ysol = [], []
for h in hvals:

    # Define linear system (first-order)
    n = int((tspan[1] - tspan[0]) / h) + 1
    t = np.arange(n) * h
    a, b, c, d = [np.zeros(n) for _ in range(4)]
    b[::n-1] = 1
    d[::n-1] = bvals
    for i in range(1, n-1):
        a[i] = 1
        b[i] = 7 * h ** 2 - 3 * h * t[i] - 2
        c[i] = 1 + 3 * h * t[i]
        d[i] = h ** 2 * np.cos(2 * t[i])

    # Solve linear system
    y = tridiagonal_solver(a, b, c, d)
    ysol.append(y)
    tsol.append(t)

# Solve using second-order method
# Define linear system (second-order)
h = hvals[0]
n = int((tspan[1] - tspan[0]) / h) + 1
t = np.arange(n) * h
a, b, c, d = [np.zeros(n) for _ in range(4)]
b[::n-1] = 1
d[::n-1] = bvals
for i in range(1, n - 1):
    a[i] = 2 - 3 * h * t[i]
    b[i] = 14 * h ** 2 - 4
    c[i] = 2 + 3 * h * t[i]
    d[i] = 2 * h ** 2 * np.cos(2 * t[i])

# Solve linear system
y = tridiagonal_solver(a, b, c, d)
ysol.append(y)
tsol.append(t)

# Plot solution (first-order only)
fig, ax = plt.subplots(figsize=(8, 6))
plt.plot(tsol[0], ysol[0], "b-", label=f"first-order ($h={hvals[0]})$")
plt.plot(tsol[1], ysol[1], "r-", label=f"first-order ($h={hvals[1]})$")
plt.xlabel("$t$", fontsize=14)
plt.ylabel("$y$", fontsize=14)
plt.legend(fontsize=12)
plt.show()

from myst_nb import glue
glue("bvp_fdm_accuracy_plot_1", fig, display=False)

# Plot solution (first and second-order)
fig, ax = plt.subplots(figsize=(8, 6))
plt.plot(tsol[0], ysol[0], "b-", label=f"first-order ($h={hvals[0]}$)")
plt.plot(tsol[1], ysol[1], "r-", label=f"first-order ($h={hvals[1]}$)")
plt.plot(tsol[2], ysol[2], "g-", label=f"second-order ($h={h}$)")
plt.xlabel("$t$", fontsize=14)
plt.ylabel("$y$", fontsize=14)
plt.legend(fontsize=12)
plt.show()

glue("bvp_fdm_accuracy_plot_2", fig, display=False)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[2], line 22[0m
[1;32m     19[0m     d[i] [38;5;241m=[39m h [38;5;241m*[39m[38;5;241m*[39m [38;5;241m2[39m [38;5;241m*[39m np[38;5;241m.[39mcos([38;5;241m2[39m [38;5;241m*[39m t[i])
[1;32m     21[0m [38;5;66;03m# Solve linear system[39;00m
[0;32m---> 22[0m y [38;5;241m=[39m tridiagonal_solver(a, b, c, d)
[1;32m     23[0m ysol[38;5;241m.[39mappend(y)
[1;32m     24[0m tsol[38;5;241m.[39mappend(t)

[0;31mTypeError[0m: tridiagonal_solver() takes 2 positional arguments but 4 were given
TypeError: tridiagonal_solver() takes 2 positional arguments but 4 were given

